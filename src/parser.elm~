module Parser where

import Set
import Char

type Term = Var Char Int 
          | App Term Term (Set Char)
          | Lam Char Term (Set Char)

type alias DeadEnd = DeadEnd { message : String
                             , column : Int
                             , row : Int
                             }

type alias Error = UnexpectedCharactor Char Char
                 | UnexpectedEnd Char
    
type alias Parser a = List Char -> (Result Error a, List Char, Int) 

-- run : Parser a -> String -> Result Error a  
-- run parser str = case parser (Char.toList str) 0 of
--                      (Ok x, rest, i) -> 
    
lit : Char -> Parser Char
lit c =
    \input i ->
        case input of
            [] -> (Err UnexpectedEnd c, input, i)
            x::xs -> if x == c then (Ok x, xs, i + 1)
                     else (Err <| UnexpectedCharactor x c, xs, i)
     
    
